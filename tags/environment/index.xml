<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>environment on They call me Brett</title>
    <link>https://brettviren.github.io/tags/environment/</link>
    <description>Recent content in environment on They call me Brett</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Feb 2021 00:00:00 -0500</lastBuildDate><atom:link href="https://brettviren.github.io/tags/environment/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How I Do</title>
      <link>https://brettviren.github.io/articles/howido/</link>
      <pubDate>Tue, 09 Feb 2021 00:00:00 -0500</pubDate>
      
      <guid>https://brettviren.github.io/articles/howido/</guid>
      <description>&lt;p&gt;Sometimes people ask me how I do things digitally.  They can read this.&lt;/p&gt;
&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#2021-02-09-Introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2021-02-09-Configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2021-02-09-Editor&#34;&gt;Editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2021-02-09-Terminal&#34;&gt;Terminal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2021-02-09-Command-shell&#34;&gt;Shells&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2021-02-09-Desktop&#34;&gt;Desktop Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2021-02-09-Web&#34;&gt;Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#audio-video&#34;&gt;Audio/Video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2021-02-09-Source&#34;&gt;Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2021-02-09-Photo-management&#34;&gt;Photos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2021-02-09-Sync&#34;&gt;Sync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#passwords&#34;&gt;Passwords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2021-02-09-Time&#34;&gt;Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#open&#34;&gt;Open&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#todo&#34;&gt;Todo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!--endtoc--&gt;
&lt;h2 id=&#34;2021-02-09-Introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This document provides a view into how I use computers with a focus on software.  It is organized into major software categories with subsections for each important package.&lt;/p&gt;
&lt;p&gt;It also serves as notebook of documentation to remind me of some details.  Expect some incomplete sections and to see changes over time.&lt;/p&gt;
&lt;p&gt;The extensive configuration files are not available but I have some intention to rectify that at some point.&lt;/p&gt;
&lt;h3 id=&#34;2021-02-09-Typography&#34;&gt;Typography&lt;/h3&gt;
&lt;p&gt;In this document, the prompts used in examples are as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;# command run as root
$ command run as user in bash
❯ command run as user in fish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A &lt;code&gt;command&lt;/code&gt; is written like that.&lt;/p&gt;
&lt;h3 id=&#34;2021-02-09-Hardware&#34;&gt;Hardware&lt;/h3&gt;
&lt;p&gt;Hardware interests me less than software so I do not go into detail other than to give hostnames to four hardware roles:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;hometop&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;personal laptop (thinkpad x1e gen2)&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;worktop&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;work laptop (thinkpad x1c gen5)&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;homestation&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;personal workstation (custom build)&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;workstation&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;work workstation (ASLab Marquis)&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;homeserver&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;personal server with ports exposed to the Internet&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;For the last one, I maintain a dynamic DNS subdomain from the great folks at &lt;a href=&#34;https://freedns.afraid.org/&#34;&gt;afraid&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;2021-02-09-Configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Configuration files (&amp;ldquo;dotfiles&amp;rdquo;) are stored in a private &lt;a href=&#34;https://gitea.io/&#34;&gt;Gitea&lt;/a&gt; instance and most clones are managed with &lt;a href=&#34;https://github.com/RichiH/vcsh&#34;&gt;vcsh&lt;/a&gt; and &lt;a href=&#34;https://myrepos.branchable.com/&#34;&gt;myrepos&lt;/a&gt; with &lt;a href=&#34;https://www.passwordstore.org/&#34;&gt;pass&lt;/a&gt; and etckeeper managing its own.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;vcsh&lt;/code&gt; &lt;code&gt;git&lt;/code&gt; repo manager allows multiple &lt;code&gt;git&lt;/code&gt; repos to supply files into &lt;code&gt;$HOME&lt;/code&gt; without any actual &lt;code&gt;.git/&lt;/code&gt; directory there.  It allows for the target filesystem space to be interleaved with files managed in separate git repos.  Seems crazy, works great.&lt;/p&gt;
&lt;p&gt;My &lt;code&gt;vcsh&lt;/code&gt; repos include config for: &lt;del&gt;bash, bbdb, emacs, git, mr (myrepos), nixpkgs, sawfish, scripts, ssh, systemd, tmux, weechat&lt;/del&gt; bbdb for contacts in BBDB and a consolidated &amp;ldquo;dots&amp;rdquo; for all the dot files.  I started with many fine-grained repos and mr to help do bootstrap but this was more work with no perceived benefit.  I kept bbdb separate as one day I may make the &amp;ldquo;dots&amp;rdquo; repo public.  Some setup of individual things are described in following sections but first how &lt;code&gt;vcsh&lt;/code&gt; is handled.&lt;/p&gt;
&lt;h3 id=&#34;2021-02-09-Configuration-Initialize&#34;&gt;Initialize&lt;/h3&gt;
&lt;p&gt;Each repo needs a one time setup like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;# apt install vcsh
$ vcsh init bbdb
$ vcsh bbdb add .bbdb
$ vcsh bbdb commit -m &amp;#34;First commit&amp;#34;
$ vcsh bbdb remote add origin gogs@homeserver:bv/dot-bbdb.git
$ vcsh bbdb push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2021-02-09-Multiple-repositories&#34;&gt;Multiple repositories&lt;/h3&gt;
&lt;p&gt;There is built-in support for multiple repositories in &lt;code&gt;vcsh&lt;/code&gt;, eg:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ vcsh status
$ vcsh pull
$ vcsh push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2021-02-09-Bootstrap-new-account&#34;&gt;Bootstrap new account&lt;/h3&gt;
&lt;p&gt;A new account can clone individual repos:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ vcsh clone gogs@homeserver:bv/dot-bbdb.git bbdb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2021-02-09-Ignoring&#34;&gt;Ignoring&lt;/h3&gt;
&lt;p&gt;Any &lt;code&gt;git&lt;/code&gt; command run through &lt;code&gt;vcsh&lt;/code&gt; uses &lt;code&gt;$HOME&lt;/code&gt; as the Git working dir.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ vcsh bbdb status
[... long list of untracked files ...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can have &lt;code&gt;vcsh&lt;/code&gt; Git command ignore anything not explicitly committed to a &lt;code&gt;vcsh&lt;/code&gt; Git repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ vcsh write-gitignore bbdb
$ vcsh bbdb status
On branch master
Your branch is up-to-date with &amp;#39;origin/master&amp;#39;.
nothing to commit, working directory clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;write-gitignore&lt;/code&gt; command will create a file like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cat ~/.gitignore.d/bbdb
*
!/.bbdb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the case of sub-directories of interest which exist among siblings to ignore one has to add exhaustive paths to the allow list.  For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;*
!/.local
!/.local/share
!/.local/share/applications
!/.local/share/applications/*.desktop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2021-02-09-Making-updates&#34;&gt;Making updates&lt;/h3&gt;
&lt;p&gt;Here we make a change to the omnibus dots package&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;❯ emacs -nw .config/kitty/(hostname).conf
❯ vcsh dots add .config/kitty/(hostname).conf
❯ vcsh dots commit -am &amp;#34;customize for &amp;#34;(hostname)
❯ vcsh dots push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2021-02-09-Applying-updates&#34;&gt;Applying updates&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;❯ vcsh dots pull
❯ vcsh pull  # en masse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2021-02-09-Checking-for-updates&#34;&gt;Checking for updates&lt;/h3&gt;
&lt;p&gt;I want my prompt to tell me when a local account has modified, is behind the remote &lt;code&gt;vcsh&lt;/code&gt; or ahead of it (made a commit but not push).  To check the remote takes time and also needs SSH credentials.  The functionality is in &lt;a href=&#34;~/scripts/vcsh-extra&#34;&gt;vcsh-extra&lt;/a&gt; with commands &lt;code&gt;hooks&lt;/code&gt;, &lt;code&gt;probe&lt;/code&gt; and &lt;code&gt;cron&lt;/code&gt; which call both and &lt;code&gt;fetch&lt;/code&gt;.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;fetch&lt;/dt&gt;
&lt;dd&gt;the &lt;code&gt;fetch&lt;/code&gt; command simply does a:&lt;/dd&gt;
&lt;/dl&gt;
&lt;!--listend--&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;vcsh foreach fetch
&lt;/code&gt;&lt;/pre&gt;&lt;dl&gt;
&lt;dt&gt;probe&lt;/dt&gt;
&lt;dd&gt;the &lt;code&gt;probe&lt;/code&gt; command will run &lt;code&gt;vcsh status --terse&lt;/code&gt; and parse it for state to touch files &lt;code&gt;last-{ahead,behind,modified}&lt;/code&gt; (removing any stale ones).&lt;/dd&gt;
&lt;dt&gt;hooks&lt;/dt&gt;
&lt;dd&gt;the &lt;code&gt;hooks&lt;/code&gt; command install vcsh hooks which will run the &lt;code&gt;probe&lt;/code&gt; command named after an action.  Ie in: &lt;code&gt;post-{pull,push,commit,enter,run}&lt;/code&gt; is:&lt;/dd&gt;
&lt;/dl&gt;
&lt;!--listend--&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;vcsh-extra probe
&lt;/code&gt;&lt;/pre&gt;&lt;dl&gt;
&lt;dt&gt;cron&lt;/dt&gt;
&lt;dd&gt;the &lt;code&gt;cron&lt;/code&gt; command bundles calls the three commands in sequence after&lt;/dd&gt;
&lt;/dl&gt;
&lt;!--listend--&gt;
&lt;pre&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;eval $(keychain --quiet --noask --eval id_rsa)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In summary, the cron job runs once per hour, fetching but not applying any changes and doing the &lt;code&gt;probe&lt;/code&gt; to summarize what state that leaves the local &lt;code&gt;vcsh&lt;/code&gt; repositories.&lt;/p&gt;
&lt;p&gt;When doing &lt;code&gt;vcsh&lt;/code&gt; commands the hooks run to repeat the &lt;code&gt;probe&lt;/code&gt; (which is fast enough).&lt;/p&gt;
&lt;h3 id=&#34;noticing-changes&#34;&gt;Noticing changes&lt;/h3&gt;
&lt;p&gt;In the shell prompts I add an indicator of the vcsh state.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;bash&lt;/code&gt; the &lt;code&gt;PROMPT_COMMAND&lt;/code&gt; will check for the existence &lt;code&gt;last-{ahead,behind,modified}&lt;/code&gt; files and prepend a little marker to the prompt.  If all three types of &amp;ldquo;dirty&amp;rdquo; occur, the prompt looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{ABM}bv@hal:~
$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For &lt;code&gt;fish&lt;/code&gt;, a &lt;code&gt;_tide_item_vcsh()&lt;/code&gt; function is defined to do similar.&lt;/p&gt;
&lt;h2 id=&#34;2021-02-09-Editor&#34;&gt;Editor&lt;/h2&gt;
&lt;h3 id=&#34;2021-02-09-Emacs&#34;&gt;Emacs&lt;/h3&gt;
&lt;p&gt;I use Emacs for Email (GNUS), Contacts (BBDB), software development, document and presentation production (orgmode and LaTeX), bookmark management (&lt;code&gt;org-protocol&lt;/code&gt; and &lt;code&gt;org-capture&lt;/code&gt;) and web form text entry (&lt;code&gt;atomic-chrome&lt;/code&gt;).  Emacs 27 is soon to be released but I can&amp;rsquo;t wait so I build it from source (see &lt;a href=&#34;#2021-02-09-Source&#34;&gt;Source&lt;/a&gt;).  It now allows &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; which I make use of by &lt;strong&gt;conceptually&lt;/strong&gt; doing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ rm -rf .emacs*
$ mkdir .config/emacs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Typing &lt;code&gt;emacs&lt;/code&gt; then uses &lt;code&gt;$XDG_CONFIG_HOME/emacs/init.el&lt;/code&gt;.  There&amp;rsquo;s lots of fashionable ways to configure &lt;code&gt;init.el&lt;/code&gt;.  I don&amp;rsquo;t follow then except to break up the config into many &lt;code&gt;init-*.el&lt;/code&gt; and &lt;code&gt;(require)&lt;/code&gt; them in a big list.&lt;/p&gt;
&lt;h4 id=&#34;emacs-packages&#34;&gt;Emacs packages&lt;/h4&gt;
&lt;p&gt;I heavily use &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;use-package&lt;/a&gt; and in two modes.  I want the ability to blow away any &lt;code&gt;emacs.d/elpa/&lt;/code&gt; area and rebuild it any time but normally don&amp;rsquo;t want to spend the extra load time to query for package state.  This is in &lt;code&gt;init-package.el&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package&lt;/span&gt;)
(setq package-archives
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org&amp;#34;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://orgmode.org/elpa/&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gnu&amp;#34;&lt;/span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://elpa.gnu.org/packages/&amp;#34;&lt;/span&gt;)
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;melpa&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://melpa.org/packages/&amp;#34;&lt;/span&gt;)))
(package-initialize)
&lt;span style=&#34;color:#75715e&#34;&gt;;; uncomment this block and restart emacs to get new packages&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; (setq use-package-always-ensure t)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; (package-refresh-contents)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;; (unless (package-installed-p &amp;#39;use-package)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;   (package-install &amp;#39;use-package))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;;;;;;&lt;/span&gt;
(require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use-package&lt;/span&gt;)
(provide &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;init-packages&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;modular-config&#34;&gt;Modular config&lt;/h4&gt;
&lt;p&gt;I factor my Emacs configuration as par &lt;code&gt;modular-config&lt;/code&gt; with &amp;ldquo;modules&amp;rdquo; in &lt;code&gt;~/.config/emacs/init/*.el&lt;/code&gt; and some top level configs listed like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;(use-package modular-config
  :custom
  (modular-config-list
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(
     (full (base gui orgmode dired smex spelling markdown lisp cpp python jsonnet tail))
     (email (base gui orgmode email))
     (empty ())
     (plain (base))
     (main (base gui orgmode))
     &lt;span style=&#34;color:#75715e&#34;&gt;;; Used from EDITOR&lt;/span&gt;
     (cmdline (base cli))
     &lt;span style=&#34;color:#75715e&#34;&gt;;; Used from $VISUAL&lt;/span&gt;
     (visual (base gui))
     (blog (base gui orgpub dired smex spelling markdown cpp python))
     (prog (base gui orgmode dired smex spelling markdown cpp python))
     &lt;span style=&#34;color:#75715e&#34;&gt;;; for calling from GhostText, except we still do it&lt;/span&gt;
     &lt;span style=&#34;color:#75715e&#34;&gt;;; through init-atomic-chrome.el&lt;/span&gt;
     (ghost (base gui dired ivy smex spelling markdown))
     &lt;span style=&#34;color:#75715e&#34;&gt;;; for calling from $EDITOR&lt;/span&gt;
     (shell (base gui dired ivy smex spelling))
     ))
  (modular-config-default &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;full&lt;/span&gt;)
  (modular-config-path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/.config/emacs/init&amp;#34;&lt;/span&gt;)
  :config
  (modular-config-command-line-args-process))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I then may select a configuration on the command line like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ emacs --config plain [...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;gnus-bbdb&#34;&gt;GNUS/BBDB&lt;/h4&gt;
&lt;p&gt;t.b.d.&lt;/p&gt;
&lt;h4 id=&#34;emacs-servers&#34;&gt;Emacs servers&lt;/h4&gt;
&lt;p&gt;To support bookmark capture (Firefox + org-protocol + a script) and text entry editing (GhostText + atomic-chrome) I have dedicated Emacs server configuration as well.  These servers are started via &lt;code&gt;supervisord&lt;/code&gt; which itself starts from cron:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ crontab -l|grep supervisord
@reboot supervisord -c /home/bv/scripts/supervisor.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That =~/scripts/~ directory is in &lt;code&gt;vcsh&lt;/code&gt;.  The two Emacs servers are started like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[program:emacs-capture]
command=%(ENV_HOME)s/scripts/emacs-start-server capture
directory=%(ENV_HOME)s
autorestart = false

[program:emacs-atomic-chrome]
command=%(ENV_HOME)s/scripts/emacs-start-server atomic-chrome
directory=%(ENV_HOME)s
autorestart = false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This &lt;code&gt;emacs-start-server&lt;/code&gt; script is mostly to remind me how to start Emacs properly.  It boils down to running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;exec emacs -q --fg-daemon=${name} -l ~/.config/emacs/init-${name}.el
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As such the nominal &lt;code&gt;init.el&lt;/code&gt; is not sourced.  Each server is self
contained including its &lt;code&gt;custom.el&lt;/code&gt; and its &lt;code&gt;elpa/&lt;/code&gt; area.&lt;/p&gt;
&lt;p&gt;For bookmark capture I configure Firefox to call &lt;code&gt;~/scripts/emacs-capture&lt;/code&gt; script for any &lt;code&gt;org-protocol://&lt;/code&gt; links.  Effectively it calls:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;emacsclient -n -c -s capture \
   -F &amp;#34;((name . \&amp;#34;emacs-capture\&amp;#34;) (height . 20) (width . 80))&amp;#34; \
   &amp;#34;org-protocol://capture://w/&amp;lt;encoded-url&amp;gt;/&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This runs on the &amp;ldquo;capture&amp;rdquo; server and since it uses &lt;code&gt;emacsclient&lt;/code&gt; it starts very fast.&lt;/p&gt;
&lt;h2 id=&#34;2021-02-09-Terminal&#34;&gt;Terminal&lt;/h2&gt;
&lt;h3 id=&#34;2021-02-09-Kitty&#34;&gt;Kitty&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ve tried many terminals over the years and for about the last year I have been very happily using the &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/&#34;&gt;Kitty&lt;/a&gt; terminal.  I mean the one written in Python/OpenGL and not the on derived from Putty.  Some reasons why I like it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;emoji support!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-S-h&lt;/code&gt; to load scrollback into &lt;code&gt;less&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;fast, beautiful text, Free Software&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It also has sub-programs called &amp;ldquo;kittens&amp;rdquo; such as &lt;code&gt;kitten icat foo.png&lt;/code&gt; to show a graphic in the terminal.  Or &lt;code&gt;kitten diff&lt;/code&gt; to show a pretty side-by-side diff.  These are nice but I rarely use them.&lt;/p&gt;
&lt;p&gt;Here is an install command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;python3 setup.py --prefix=/usr/local/stow/kitty-0.19.3 linux-package
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/build.html&#34;&gt;kitty build instructions&lt;/a&gt; and &lt;a href=&#34;#2021-02-09-Stow&#34;&gt;Stow&lt;/a&gt; for more info.&lt;/p&gt;
&lt;p&gt;No particularly fancy config.  It lives in &lt;code&gt;.config/kitty/kitty.conf&lt;/code&gt; and ends with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;include local.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that file is made locally, once per account:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;❯ ln -sf ~/.config/kitty/{(hostname),local}.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I start &lt;code&gt;weechat&lt;/code&gt; in a special kitty:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;❯ kitty -o &amp;#39;map kitty_mod+e kitten hints --customize-processing weechat_hints.py&amp;#39; weechat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where that Python script is from &lt;a href=&#34;https://github.com/GermainZ/kitty-weechat-hints&#34;&gt;https://github.com/GermainZ/kitty-weechat-hints&lt;/a&gt;.  I can then give &lt;code&gt;C-S-e&lt;/code&gt; to kitty followed a number matching one of the found URLs to open.  The &lt;code&gt;weechat_hints.py&lt;/code&gt; does the heavy lifting to form the URL in the face of possible line splitting by weechat.&lt;/p&gt;
&lt;p&gt;I tell &lt;code&gt;kitty&lt;/code&gt; to open URLs or other hyperlinks via:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;open_url_with kitty-open
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which merely redirects to my personal &lt;code&gt;open&lt;/code&gt; command, described below.&lt;/p&gt;
&lt;h2 id=&#34;2021-02-09-Command-shell&#34;&gt;Shells&lt;/h2&gt;
&lt;p&gt;I have moved to the &lt;code&gt;fish&lt;/code&gt; shell but have been a long time and still sometimes user of &lt;code&gt;bash&lt;/code&gt;.  From &lt;code&gt;fish&lt;/code&gt; sessions I will sometimes still start &lt;code&gt;bash&lt;/code&gt; to do some complex command which I&amp;rsquo;ve yet to master in &lt;code&gt;fish&lt;/code&gt;.  In this mixed environment it is sometimes necessary to explicitly set &lt;code&gt;SHELL&lt;/code&gt; to either &lt;code&gt;fish&lt;/code&gt; or &lt;code&gt;bash&lt;/code&gt; as some commands are sensitive to the value.&lt;/p&gt;
&lt;h3 id=&#34;2021-02-09-Fish&#34;&gt;Fish&lt;/h3&gt;
&lt;p&gt;Fish is a really amazing shell which requires very little configuration to make it &amp;ldquo;feel right&amp;rdquo; (unlike &lt;code&gt;bash&lt;/code&gt;).  Here are a few things I do with fish.&lt;/p&gt;
&lt;p&gt;I use the &lt;a href=&#34;https://github.com/IlanCosman/tide&#34;&gt;tide&lt;/a&gt; prompt which is very nice, easy and popular.  Amazingly, it is as I like it out of the box and I do very little customization.  The &lt;code&gt;vcsh&lt;/code&gt; customization described above is one exception.&lt;/p&gt;
&lt;p&gt;I use this &lt;code&gt;fzf&lt;/code&gt; / Fish integration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ fisher add PatricF1/fzf.fish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Only customization is to override the &lt;code&gt;C-f&lt;/code&gt; keybinding as it&amp;rsquo;s needed for my Emacs-trained fingers for character-forward.  In &lt;code&gt;config.fish&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fish&#34; data-lang=&#34;fish&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# override fzf bindings
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;bind --erase &lt;span style=&#34;color:#ae81ff&#34;&gt;\c&lt;/span&gt;f
bind &lt;span style=&#34;color:#ae81ff&#34;&gt;\c&lt;/span&gt;o &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__fzf_search_current_dir&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To use &lt;code&gt;direnv&lt;/code&gt; I add per docs, &lt;code&gt;conf.d/direnv.fish&lt;/code&gt; with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fish&#34; data-lang=&#34;fish&#34;&gt;eval &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;direnv hook fish&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When I started learning Fish, I ported my shell implemenation &lt;a href=&#34;https://github.com/brettviren/shist&#34;&gt;shist&lt;/a&gt; of &lt;a href=&#34;https://github.com/barabo/advanced-shell-history&#34;&gt;ash&lt;/a&gt; to  &lt;a href=&#34;https://github.com/brettviren/fishql&#34;&gt;fishql&lt;/a&gt;.  This gave a nice vehicle to dive into Fish programming.  However, I&amp;rsquo;ve stopped using it because I find I almost never actually use the SQL query functionality.&lt;/p&gt;
&lt;p&gt;As &lt;code&gt;kitty&lt;/code&gt; has support for &lt;code&gt;ls --hyperlink&lt;/code&gt; I modify fish&amp;rsquo;s &lt;code&gt;ls&lt;/code&gt; command to add it.  I did not see a &amp;ldquo;right&amp;rdquo; way to do this so I copied &lt;code&gt;ls.fish&lt;/code&gt; from a recent install to &lt;code&gt;.config/fish/functions/ls.fish&lt;/code&gt; and added a &lt;code&gt;__fish_ls_opts&lt;/code&gt; variable to the final command call and then run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;❯ set -U __fish_ls_opts --hyperlink=auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This now gives me the dubious pleasure of clicking on Kitty&amp;rsquo;s rendering of the &lt;code&gt;ls&lt;/code&gt; command and having &lt;code&gt;open&lt;/code&gt; handle that.  More on opening files below.&lt;/p&gt;
&lt;h3 id=&#34;2021-02-09-Bash&#34;&gt;Bash&lt;/h3&gt;
&lt;p&gt;Though I have moved to &lt;code&gt;fish&lt;/code&gt;, I keep my &lt;code&gt;bash&lt;/code&gt; setup alive as I sometimes will start &lt;code&gt;bash&lt;/code&gt; from a &lt;code&gt;fish&lt;/code&gt; session.&lt;/p&gt;
&lt;p&gt;My &lt;code&gt;.bashrc&lt;/code&gt; is run for login or subshells.  It delegates configuration to scripts under &lt;code&gt;/.bash/{functions,variables,apps}/*.sh&lt;/code&gt; and &amp;ldquo;mounts&amp;rdquo; some git subtrees under &lt;code&gt;/.bash/subtrees&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One subtree of note is &lt;a href=&#34;https://github.com/brettviren/shist&#34;&gt;shist&lt;/a&gt; which is my Bash implementation of &lt;a href=&#34;https://github.com/barabo/advanced-shell-history&#34;&gt;advanced shell history&lt;/a&gt;.  This integrates with Bash prompting to record history in an Sqlite3 database.&lt;/p&gt;
&lt;p&gt;I strongly avoid using &lt;code&gt;alias&lt;/code&gt; (eg, no &lt;code&gt;ll&lt;/code&gt; for &lt;code&gt;ls -l&lt;/code&gt;) as I think inventing my own Unix command set is an anti-pattern.  I do capture some larger commands in Bash functions so that tab-completion can remind me of the (eg, a bunch of &lt;code&gt;emacs-server-*&lt;/code&gt; functions to manage different Emacs servers).&lt;/p&gt;
&lt;p&gt;I used to loop over &lt;code&gt;$HOME/opt/*/{bin,lib,man,lib/pkgconfig}&lt;/code&gt; to set &lt;code&gt;PATH, LD_LIBRARY_PATH, MANPATH, PKG_CONFIG_PATH&lt;/code&gt;.  This I now deprecate in favor of a Stow-based install for common software and a per-development area governed by &lt;code&gt;direnv&lt;/code&gt;.  See &lt;a href=&#34;#2021-02-09-Source&#34;&gt;Source&lt;/a&gt; for more info on this aspect.&lt;/p&gt;
&lt;h2 id=&#34;2021-02-09-Desktop&#34;&gt;Desktop Environment&lt;/h2&gt;
&lt;p&gt;By which I mean what the X11 (and not wayland) server manages.&lt;/p&gt;
&lt;p&gt;I have fully migrated from the really great Sawfish to the equally delightful though different Herbsluftwm.  I&amp;rsquo;ve used Sawfish since it was the official Gnome WM back in the 90&amp;rsquo;s (back before Gnome put sugar before protein).  Sawfish is really a terrific stacking/floating WM but I wanted to move to a tiling paradigm.  Sawfish has some rudimentary support for tiling and I initially toyed with contributing to its development but figured I should first try some &amp;ldquo;real&amp;rdquo; tiling WMs.  Along came Herbsluftwm which I chose over the others initially because it had these nice graph diagrams right in the man page.  I&amp;rsquo;ve since looked at others (awesome, i3, dwm) and they are nice but I got lucky on the first draw and have fallen deeply for it.  So, I bid Sawfish a fond farewell and wish the community all the best (there are tens of us!).&lt;/p&gt;
&lt;h3 id=&#34;2021-02-09-Herbsluftwm&#34;&gt;Herbsluftwm&lt;/h3&gt;
&lt;p&gt;Herbstluftwm [German for autumn wind(ow manager)] is configured by issuing commands from the client application &lt;code&gt;herbstclient&lt;/code&gt; (&lt;code&gt;hc&lt;/code&gt;).  These commands are typically captured in two files:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;autostart&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;main configuration holding keybindings, theme settings and starting any &amp;ldquo;panels&amp;rdquo;&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;panel.sh&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;a long running process transforming WM events (via &lt;code&gt;hc --idel&lt;/code&gt;) and others into input piped to a &amp;ldquo;bar&amp;rdquo; program (&lt;code&gt;dzen2&lt;/code&gt; is default and nice but I moved to using &lt;code&gt;barpyrus&lt;/code&gt; which is started directly instead of a &lt;code&gt;panel.sh&lt;/code&gt;)&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;A lot of great shell hackery exists in this space including the default event-driven &lt;code&gt;panel.sh&lt;/code&gt; which taught me a thing or three.   But, I wanted to rely on something more &amp;ldquo;formal&amp;rdquo; so created &lt;a href=&#34;https://brettviren.github.io/herbie&#34;&gt;herbie&lt;/a&gt;.  It contains Python reimplementations of a lot of Herbsluftwm community shell hackery as well as a few new things.  It&amp;rsquo;s documentation describes how to configure and integrate into &lt;code&gt;autostart&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;barpyrus&#34;&gt;Barpyrus&lt;/h3&gt;
&lt;p&gt;Also from author of herbstluftm, this provies a Python wrapper around lemonbar and replaces the default &lt;code&gt;panel.sh&lt;/code&gt; driving &lt;code&gt;dzen&lt;/code&gt;.  It is configured with Python and my config is hugely inspired by &lt;code&gt;barpyrus.py&lt;/code&gt; from &lt;a href=&#34;https://github.com/the-compiler/dotfiles&#34;&gt;https://github.com/the-compiler/dotfiles&lt;/a&gt;.  My minor improvement was to add some unicode icons and a few additional metrics.&lt;/p&gt;
&lt;p&gt;Setting the fonts is an important detail.  In &lt;code&gt;main()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;bar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lemonbar&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Lemonbar(
    geometry&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;geom,
    cmd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/local/bin/lemonbar&amp;#34;&lt;/span&gt;,
    font&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DejaVu Sans-{font_height}&amp;#39;&lt;/span&gt;,
    symbol_font&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FantasqueSansMono Nerd Font-{font_height}&amp;#39;&lt;/span&gt;,
    foreground&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Gruv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FG, background&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Gruv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BG)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where &lt;code&gt;font_height&lt;/code&gt; is determined based on host and monitor size.  Toward the top of &lt;code&gt;main()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; socket
host &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getfqdn()
monitor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
x, y, monitor_w, monitor_h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;monitor_rect(monitor)
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; int(monitor_h) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1080&lt;/span&gt;:
    height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
    font_height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; host &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hometop&amp;#34;&lt;/span&gt;:
    height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;
    font_height &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;rofi&#34;&gt;Rofi&lt;/h3&gt;
&lt;p&gt;I use &lt;code&gt;rofi&lt;/code&gt; for various things.  &lt;code&gt;herbie&lt;/code&gt; calls it and is called by it and it is called by various &lt;code&gt;herbstluftwm&lt;/code&gt; keybindings.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rofi-screenshot&lt;/code&gt; custom script to take screen shots and optionally upload them to a popular image host with help of &lt;code&gt;maim&lt;/code&gt; and &lt;code&gt;rephile&lt;/code&gt;.  See &lt;a href=&#34;#2021-02-09-Photo-management&#34;&gt;Photos&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/carnager/rofi-pass&#34;&gt;&lt;code&gt;rofi-pass&lt;/code&gt;&lt;/a&gt; for accessing my password store (see &lt;a href=&#34;#passwords&#34;&gt;Passwords&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;built in launcher with nice icons&lt;/li&gt;
&lt;li&gt;global and per tag window selection&lt;/li&gt;
&lt;li&gt;herbstluftwm &amp;ldquo;task based&amp;rdquo; tag management via herbie&lt;/li&gt;
&lt;li&gt;herbstluftwm tag layout management via herbie&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Like with &lt;code&gt;kitty&lt;/code&gt;, a &lt;code&gt;~/.config/rofi/config-(hostname).rasi&lt;/code&gt; file which is symlinked to &lt;code&gt;config-host.rasi&lt;/code&gt; holds the per host customization.  Mostly this is to set a font size that works well for the host&amp;rsquo;s monitor(s).  For example, for a 4k 15&amp;quot; laptop monitor screen.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;configuration {
  font: &amp;#34;FantasqueSansMono Nerd Font 44&amp;#34;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2021-02-09-Sawfish&#34;&gt;Sawfish&lt;/h3&gt;
&lt;p&gt;The Sawfish X11 window manager was at one time the official WM for Gnome.  That is the time when I first started using it, moving from TWM and then FVWM.  I&amp;rsquo;ve tried a few since but always come back.  Sawfish is configured and largely written in its own flavor of lisp (&lt;a href=&#34;https://sawfish.fandom.com/wiki/Librep&#34;&gt;rep&lt;/a&gt;) and so can reasonably be considered the Emacs of window managers.  For configuration, it does an even better job than Emacs of providing both a programmable and a GUI configuration method and the two work largely well together.  Some of the reasons I use Sawfish:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hugely configurable but sane defaults&lt;/li&gt;
&lt;li&gt;my fingers have learned the key bindings I chose years (decades!) ago&lt;/li&gt;
&lt;li&gt;I bake the configuration into a git repo&lt;/li&gt;
&lt;li&gt;I can run an arbitrary program from a command line without opening a terminal&lt;/li&gt;
&lt;li&gt;tab-like navigation between virtual desktops&lt;/li&gt;
&lt;li&gt;window &amp;ldquo;filling&amp;rdquo; which I find a better compromise between stacking and tiling idioms&lt;/li&gt;
&lt;li&gt;window dressing with themes and per matched windows (eg, Firefox has no borders)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;desktop-environment&#34;&gt;Desktop environment&lt;/h3&gt;
&lt;p&gt;I largely have moved away from using a full DE.  I used MATE (Gnome 2) with Sawfish up until switching to Herbstluftwm.  All the MATE-provided bits now get replaced piecemeal.  Some of note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rofi&lt;/code&gt; for starting apps and various other menu-oriented actions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;barpyrus&lt;/code&gt; for indicators and &amp;ldquo;workspace&amp;rdquo; tabs (Herbstluftwm &amp;ldquo;tags&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nmtui&lt;/code&gt; replaces the Network Manager applet&lt;/li&gt;
&lt;li&gt;&lt;code&gt;caja&lt;/code&gt; I still keep around for rare times I want a GUI to browse a directory&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2021-02-09-Web&#34;&gt;Web&lt;/h2&gt;
&lt;h3 id=&#34;2021-02-09-Firefox&#34;&gt;Firefox&lt;/h3&gt;
&lt;p&gt;Firefox is the least worse web browser despite how Mozilla tries so hard to kill off its user base.  Not much to say except how I battle some of its worse behavior:&lt;/p&gt;
&lt;h4 id=&#34;load-url-via-remote-without-grabbing-attention&#34;&gt;Load URL via remote without grabbing attention&lt;/h4&gt;
&lt;p&gt;Set &lt;code&gt;browser.tabs.loadDivertedInBackground&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in &lt;code&gt;about:config&lt;/code&gt;.  Otherwise sending a URL via remote open will have Firefox grab focus, possibly switching to it on a different virtual desktop.  This is super annoying when doing important things like loading the morning&amp;rsquo;s web comics from &lt;code&gt;liferea&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;emacs-like-keybindings-in-firefox&#34;&gt;Emacs-like keybindings in firefox&lt;/h4&gt;
&lt;p&gt;This is one of the most frustrating things and most of the things found online are wrong.  What to do depends on the desktop environment &lt;strong&gt;and&lt;/strong&gt; its version &lt;strong&gt;and&lt;/strong&gt; maybe the distribution.&lt;/p&gt;
&lt;p&gt;Debian &lt;code&gt;buster&lt;/code&gt; and MATE 1.20.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;gsettings set org.mate.interface gtk-key-theme &amp;#39;Emacs&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;~/.config/gtk-3.0/settings.ini:

# Get firefox to use emacs keybindings
[Settings]
gtk-key-theme-name = Emacs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Tools/Settings#Editor%5FPreferences&#34;&gt;editor&lt;/a&gt; &lt;code&gt;about:config&lt;/code&gt; and&lt;/p&gt;
&lt;style&gt;.org-center { margin-left: auto; margin-right: auto; text-align: center; }&lt;/style&gt;
&lt;div class=&#34;org-center&#34;&gt;
  &lt;div&gt;&lt;/div&gt;
&lt;p&gt;devtools.editor.keymap emacs&lt;/p&gt;
&lt;/div&gt;
&lt;h4 id=&#34;using-emacs-to-edit-text&#34;&gt;Using Emacs to edit text&lt;/h4&gt;
&lt;p&gt;There used to be ItsAllText.  Now there is &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/edit-with-emacs1/&#34;&gt;Edit with Emacs&lt;/a&gt; and &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/ghosttext/&#34;&gt;GhostText&lt;/a&gt;.  The former I could not make work and the latter seems fine.&lt;/p&gt;
&lt;p&gt;GhostText needs &lt;code&gt;atomic-chrome&lt;/code&gt; to be running on Emacs.  It&amp;rsquo;s available from the Emacs package sites.  In &lt;a href=&#34;#emacs-servers&#34;&gt;Emacs servers&lt;/a&gt; I describe how the Emacs server for atomic-chrome to talk to get started.  The main Emacs parts in &lt;code&gt;init-atomic-chrome.el&lt;/code&gt; are:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;(setq server-name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;atomic-chrome&amp;#34;&lt;/span&gt;)
(use-package markdown-mode
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (setq markdown-command &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/bin/markdown&amp;#34;&lt;/span&gt;))
(use-package markdown-preview-mode
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
(use-package atomic-chrome
  :ensure &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  :config
  (setq atomic-chrome-default-major-mode &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;markdown-mode&lt;/span&gt;)
  (setq atomic-chrome-url-major-mode-alist
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github\\.com&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; gfm-mode)
          (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reddit\\.com&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; markdown-mode)
          (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;redmine&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; textile-mode)))
  (setq atomic-chrome-buffer-open-style &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;frame&lt;/span&gt;)
)
(atomic-chrome-start-server)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To use, I click the GhostText icon, sometimes it prompts me for which text area to edit, then an Emacs frame pops us.  As I type in Emacs the text entry updates.&lt;/p&gt;
&lt;!--list-separator--&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt;  get nice rendered preview for GitHub and Reddit text entries&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;bookmark-capture&#34;&gt;Bookmark capture&lt;/h4&gt;
&lt;p&gt;I want to capture bookmarks to Emacs Org files.  I mainly use &lt;a href=&#34;https://github.com/karlicoss/grasp&#34;&gt;https://github.com/karlicoss/grasp&lt;/a&gt; for that.  It uses a Firefox add-on to send info to a grasp server written in Python.  The add-on does a better job actually working on all sites (eg, GitHub causes problems with &lt;code&gt;org-protocol&lt;/code&gt; described below).  While this is an Emacs-free capture system, the resulting files are in good org-mode markup.&lt;/p&gt;
&lt;p&gt;The other method I tried is with a Firefox bookmarklet to initiate &lt;code&gt;org-protocol&lt;/code&gt; based capture:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;javascript:location.href=&amp;#39;org-protocol://capture://w/&amp;#39;+encodeURIComponent(location.href)+&amp;#39;/&amp;#39;+encodeURIComponent(document.title)+&amp;#39;/&amp;#39;+encodeURIComponent(window.getSelection())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;/w/&lt;/code&gt; corresponds to an org capture template&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;(setq org-capture-templates
      (quote
       ((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Web Bookmark&amp;#34;&lt;/span&gt; entry
         (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/org/webcapture.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bookmarks&amp;#34;&lt;/span&gt;)
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %a :website:%^G\n:PROPERTIES:\n:CREATED: %U\n:END:\n%i\n %?&amp;#34;&lt;/span&gt;
         :empty-lines &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; :immediate-finish &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)))
      org-agenda-files (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/org/webcapture.org&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some frame management is done with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;(defadvice org-capture
    (after make-full-window-frame activate)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Advise capture to be the only window when used as a popup&amp;#34;&lt;/span&gt;
 (if (&lt;span style=&#34;color:#a6e22e&#34;&gt;equal&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;emacs-capture&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;frame-parameter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&lt;/span&gt;))
     (delete-other-windows)))

(defadvice org-capture-finalize
    (after delete-capture-frame activate)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Advise capture-finalize to close the frame&amp;#34;&lt;/span&gt;
  (if (&lt;span style=&#34;color:#a6e22e&#34;&gt;equal&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;emacs-capture&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;frame-parameter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&lt;/span&gt;))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;delete-frame&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;kill-sticky&#34;&gt;Kill Sticky&lt;/h4&gt;
&lt;p&gt;The web is mostly festering garbage and getting worse over time.  Many web sites, even ones that should know batter (stack overflow) put up so much obscuring crap that it can be hard to see the content.  Enter &lt;strong&gt;Kill Sticky&lt;/strong&gt; (not a Tarantino movie, but better).  It is &lt;a href=&#34;https://alisdair.mcdiarmid.org/kill-sticky-headers/&#34;&gt;this bookmarklet&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;javascript:(function()%7B(function%20()%20%7Bvar%20i%2C%20elements%20%3D%20document.querySelectorAll(&amp;#39;body%20*&amp;#39;)%3Bfor%20(i%20%3D%200%3B%20i%20%3C%20elements.length%3B%20i%2B%2B)%20%7Bif%20(getComputedStyle(elements%5Bi%5D).position%20%3D%3D%3D%20&amp;#39;fixed&amp;#39;)%20%7Belements%5Bi%5D.parentNode.removeChild(elements%5Bi%5D)%3B%7D%7D%7D)()%7D)()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;click-is-not-select-all&#34;&gt;Click is not select all&lt;/h4&gt;
&lt;p&gt;One of the more infuriating things which changed in somewhat recent
Firefox versions is that clicking on the urlbar selects the damn
content.  This is such disgusting reprehensible behavior that I would
not be surprised if its existence is evidence that Chrome developers
are operating as moles inside the Firefox organization.&lt;/p&gt;
&lt;p&gt;Thank ioctl for the work of &lt;a href=&#34;https://github.com/SebastianSimon/firefox-omni-tweaks&#34;&gt;https://github.com/SebastianSimon/firefox-omni-tweaks&lt;/a&gt;.
Running this nicely written bash script will munge some &lt;code&gt;omni.ja&lt;/code&gt; files
in the FF install to undo the mess.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;❯ wget -O scripts/fix-firefox-omni &amp;#39;https://raw.githubusercontent.com/SebastianSimon/firefox-omni-tweaks/master/fixfx.sh&amp;#39;
❯ chmod +x scripts/fix-firefox-omni
❯ fix-firefox-omni -f /usr/lib/firefox-esr -o preventClickSelectsAll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, restart FF and sigh with deep contentment.&lt;/p&gt;
&lt;h2 id=&#34;audio-video&#34;&gt;Audio/Video&lt;/h2&gt;
&lt;h3 id=&#34;mpv&#34;&gt;mpv&lt;/h3&gt;
&lt;p&gt;I use &lt;code&gt;mpv&lt;/code&gt; for just about all A/V.  I also try to make it run for YouTube and the like as it is less resource intensive than YT&amp;rsquo;s web page on FF.  See the section &lt;a href=&#34;#open&#34;&gt;Open&lt;/a&gt; below for how things are routed to mpv.  Calling&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;mpv --profile=yt &amp;lt;youtube-url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Will invoke this section of &lt;code&gt;~/.config/mpv/mpv.conf&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[yt]
script-opts=ytdl_hook-ytdl_path=yt-dlp
ytdl-format=137+251
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This requires &lt;code&gt;yt-dlp&lt;/code&gt; installed.  It also does not always work for reasons I do not understand.  Either YT does not have the formats and the command fails outright or YT sends data so damn slowly that the stream constantly pauses to buffer.  Outright failure is checked for in &lt;code&gt;web-browser&lt;/code&gt; (see &lt;a href=&#34;#open&#34;&gt;Open&lt;/a&gt; below) and the URL is fail-over dispatched to &lt;code&gt;x-www-browser&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;2021-02-09-Source&#34;&gt;Source&lt;/h2&gt;
&lt;p&gt;See also &lt;a href=&#34;#2021-02-09-Configuration&#34;&gt;Configuration&lt;/a&gt; and individual package sections.  Here I describe ways I install software locally which means outside of Debian&amp;rsquo;s package management.&lt;/p&gt;
&lt;h3 id=&#34;2021-02-09-DIY-opt&#34;&gt;DIY opt&lt;/h3&gt;
&lt;p&gt;For some development dependencies, I will build and install using &lt;code&gt;$HOME/opt/&amp;lt;pkg&amp;gt;&lt;/code&gt; as the install &amp;ldquo;prefix&amp;rdquo;.  I try to avoid making these part of day-to-day environment.&lt;/p&gt;
&lt;h3 id=&#34;2021-02-09-Stow&#34;&gt;Stow&lt;/h3&gt;
&lt;p&gt;I used to follow the &lt;a href=&#34;#2021-02-09-DIY-opt&#34;&gt;DIY opt&lt;/a&gt; method to provide software that is built from source until I had a weird time traveling revelation.  I&amp;rsquo;m essentially the only user on most machines where I need what was in &lt;a href=&#34;#2021-02-09-DIY-opt&#34;&gt;DIY opt&lt;/a&gt; so why not just install to &lt;code&gt;/usr/local&lt;/code&gt;.  The one thing that was lacking was pristine uninstallation.  To get that I started using the venerable GNU Stow package.&lt;/p&gt;
&lt;p&gt;Even though implemented in Perl, GNU Stow works great (joke)!  One-time setup&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;# mkdir /usr/local/stow
# chgrp staff /usr/local/stow
# chmod g+s /usr/local/stow
# sudo adduser bv staff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I then install from source to a location under the Stow directory with a name based on the package name and version.  Eg&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ ./configure --prefix=/usr/local/stow/rofi-1.6.1/
$ make -j (nproc)
$ make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then finish with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;# cd /usr/local/stow
# stow rofi-1.6.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;common-source-setup-reminders&#34;&gt;Common source setup reminders&lt;/h3&gt;
&lt;h4 id=&#34;2021-02-09-CMake&#34;&gt;CMake&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ mkdir ~/opt
$ cd pkg
$ mkdir build &amp;amp;&amp;amp; cd build
$ cmake -G Ninja .. -DCMAKE_INSTALL_PREFIX=$HOME/opt/pkg [...]
$ cmake --build . -- -j$(nproc)
$ cmake --build . --target install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2021-02-09-autoconf&#34;&gt;autoconf&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ mkdir ~/opt
$ cd pkg
$ ./autogen
$ ./configure --prefix=$HOME/opt/pkg
$ make -j$(nproc)
$ make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2021-02-09-Python&#34;&gt;Python&lt;/h4&gt;
&lt;p&gt;When I work on a Python package I use &lt;code&gt;direnv&lt;/code&gt; (see also &lt;a href=&#34;#2021-02-09-Command-shell&#34;&gt;Shells&lt;/a&gt;) do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;# apt install direnv
$ cd a-python-package/
$ echo layout python3 &amp;gt; .envrc
$ direnv allow
$ pip install -e .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A lesser way but which does not require &lt;code&gt;direnv&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ python3 -m venv venv
$ source venv/bin/activate
$ pip install -e .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;things-i-explicitly-don-t-use&#34;&gt;Things I explicitly don&amp;rsquo;t use&lt;/h3&gt;
&lt;h4 id=&#34;2021-02-09-Spack&#34;&gt;Spack&lt;/h4&gt;
&lt;p&gt;Spack is great for managing complex and shared software deployments.  From time to time I have used it for managing personal software.  That has been modus hiatus for a while due to various minor annoyances related to personal usage.  A lot has changed with Spack since then and I have some plans to revisit this approach.&lt;/p&gt;
&lt;h4 id=&#34;2021-02-09-Nix-Guix&#34;&gt;Nix/Guix&lt;/h4&gt;
&lt;p&gt;I have used Nix and Guix to provide add-on environments.  They always start out great but turn horrible.  In part, I just can not get a handle on the Nix language.  Guix&amp;rsquo;s use of guile is much better but it&amp;rsquo;s like learning Emacs, it&amp;rsquo;s a deep rabbit hole.  Like Spack, this remains an anti-use.&lt;/p&gt;
&lt;h2 id=&#34;2021-02-09-Photo-management&#34;&gt;Photos&lt;/h2&gt;
&lt;p&gt;See also &lt;a href=&#34;#2021-02-09-Syncthing&#34;&gt;Syncthing&lt;/a&gt; for how photos are extracted off my phone.&lt;/p&gt;
&lt;h3 id=&#34;2021-02-09-Rephile&#34;&gt;Rephile&lt;/h3&gt;
&lt;p&gt;I used to dump photos from scans, cameras or phones into various directories.  This grew organic and I&amp;rsquo;ve lost chunks of memories when directories went missing.  So I got &amp;ldquo;serious&amp;rdquo; and wrote &lt;a href=&#34;https://brettviren.github.io/rephile&#34;&gt;rephile&lt;/a&gt;.  It still allows a distributed store sprinkled around various directories and it supports &lt;a href=&#34;#2021-02-09-Git-annex&#34;&gt;git-annex&lt;/a&gt; repositories.  It keeps an &lt;code&gt;sqlite&lt;/code&gt; database of metadata and has some extras such as uploads to a popular image host.&lt;/p&gt;
&lt;h2 id=&#34;2021-02-09-Sync&#34;&gt;Sync&lt;/h2&gt;
&lt;h3 id=&#34;2021-02-09-Syncthing&#34;&gt;Syncthing&lt;/h3&gt;
&lt;p&gt;Syncthing is a jewel of a system.  It&amp;rsquo;s your own personal peer-to-peer (which here means you-to-you or you-to-friends not you-to-anonymous-strangers) file transfer system.  Encryption, distribute hash table, UDP hole punching, simple beautiful web interface, cross platform.  What more can you ask for?&lt;/p&gt;
&lt;p&gt;I run it on my android phone and all Linux machines, home and at work.
For the phone I sync photos and org files.  For Linux machines various
things but in particular a &lt;code&gt;~/sync/&lt;/code&gt; is shared between all and holds
mostly my talks.  My &lt;code&gt;~/org/&lt;/code&gt; holds my personal &amp;ldquo;wiki&amp;rdquo; where I hold
proto-documents, notes, etc as well as bookmarks grabbed as described
above.&lt;/p&gt;
&lt;p&gt;One caution: the optional use of relay for data is safe and can be useful to get around tricky routing problems (both ends behind very strict firewalls) but take note that some hosts that provide Syncthing relay are also TOR nodes.  Despite these being wholly separate data streams, some idiot &amp;ldquo;security&amp;rdquo; mechanisms will flag your Syncthing as a TOR node because it happens to connect to an Internet host which also happens to provide a TOR service.&lt;/p&gt;
&lt;h3 id=&#34;2021-02-09-Git-annex&#34;&gt;Git annex&lt;/h3&gt;
&lt;p&gt;tbd. git + big files + sync rules + metadata.  Used for photos and other.&lt;/p&gt;
&lt;h2 id=&#34;passwords&#34;&gt;Passwords&lt;/h2&gt;
&lt;h3 id=&#34;pass&#34;&gt;Pass&lt;/h3&gt;
&lt;p&gt;I use &lt;a href=&#34;https://git.zx2c4.com/password-store/about/&#34;&gt;pass&lt;/a&gt; to manage my passwords and distribute them via a private repo in my personal Gitea instance.  I almost never use the same password for different endpoints and almost always use high character random passwords which I never bother to remember.  &lt;code&gt;pass&lt;/code&gt; makes that possible and easy.&lt;/p&gt;
&lt;h2 id=&#34;2021-02-09-Time&#34;&gt;Time&lt;/h2&gt;
&lt;h3 id=&#34;2021-02-09-arbtt&#34;&gt;arbtt&lt;/h3&gt;
&lt;p&gt;At work we have to &amp;ldquo;track&amp;rdquo; our time even though we don&amp;rsquo;t get payed hourly.  It feels to me a very annoying and demeaning thing.  I &amp;ldquo;protest&amp;rdquo; by keeping hugely, massively, stupidly pedantic track of my time.  I know, it&amp;rsquo;s nonsensical and weird but it allows me to comply without raising my blood pressure.  Fight idiocy with lunacy, I always say.&lt;/p&gt;
&lt;p&gt;I do this by running &lt;a href=&#34;https://arbtt.nomeata.de/#what&#34;&gt;arbtt&lt;/a&gt; on my work computers.    It starts with cron&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ crontab -l |grep arbtt
@reboot /home/bv/scripts/start-arbtt-capture
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When my employer nags me to enter this very crucial data I run a script&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ time-sheet
...
heather,Sat,2020-05-02,0.87,1.45
heather,Sun,2020-05-03,1.68,1.68
heather,Mon,2020-05-04,2.24,6.77
heather,Tue,2020-05-05,2.80,7.89
heather,Wed,2020-05-06,2.99,5.79
heather,Thu,2020-05-07,8.47,9.47
heather,Fri,2020-05-08,3.49,9.16
heather,Sun,2020-05-10,2.30,3.24
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Second to last column shows total hours my session was active, last column is time diff between last action and first in the day (MTW I was on &amp;ldquo;vacation&amp;rdquo; so less than nominal eight).&lt;/p&gt;
&lt;h3 id=&#34;2021-02-09-Meetings&#34;&gt;Time zones&lt;/h3&gt;
&lt;p&gt;I have a &lt;a href=&#34;https://superuser.com/a/1397116&#34;&gt;hacked scrip&lt;/a&gt; to help me with timezones&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ time-to-meet tomorrow
February 10, 2021
Here          08  09  10  11  12  13  14  15  16  17  18  19  20
UTC           13  14  15  16  17  18  19  20  21  22  23  24  25 (+5)
Los_Angeles   05  06  07  08  09  10  11  12  13  14  15  16  17 (-3)
Chicago       07  08  09  10  11  12  13  14  15  16  17  18  19 (-1)
London        13  14  15  16  17  18  19  20  21  22  23  24  25 (+5)
Zurich        14  15  16  17  18  19  20  21  22  23  24  25  26 (+6)
Japan         22  23  24  25  26  27  28  29  30  31  32  33  34 (+14)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ve since redone this in Python at &lt;a href=&#34;https://github.com/brettviren/titome&#34;&gt;https://github.com/brettviren/titome&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;❯ titome
                         today: Friday 11/26 09:00 (2 hours ago)
┏━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━━┓
┃ local ┃  9:00 ┃ 10:00 ┃ 11:00 ┃ 12:00 ┃ 13:00 ┃ 14:00 ┃ 15:00 ┃ 16:00 ┃ 17:00 ┃ 18:00 ┃
┡━━━━━━━╇━━━━━━━╇━━━━━━━╇━━━━━━━╇━━━━━━━╇━━━━━━━╇━━━━━━━╇━━━━━━━╇━━━━━━━╇━━━━━━━╇━━━━━━━┩
│ LBNL  │  6:00 │  7:00 │  8:00 │  9:00 │ 10:00 │ 11:00 │ 12:00 │ 13:00 │ 14:00 │ 15:00 │
│ FNAL  │  8:00 │  9:00 │ 10:00 │ 11:00 │ 12:00 │ 13:00 │ 14:00 │ 15:00 │ 16:00 │ 17:00 │
│ BNL   │  9:00 │ 10:00 │ 11:00 │ 12:00 │ 13:00 │ 14:00 │ 15:00 │ 16:00 │ 17:00 │ 18:00 │
│ RAL   │ 14:00 │ 15:00 │ 16:00 │ 17:00 │ 18:00 │ 19:00 │ 20:00 │ 21:00 │ 22:00 │ 23:00 │
│ CERN  │ 15:00 │ 16:00 │ 17:00 │ 18:00 │ 19:00 │ 20:00 │ 21:00 │ 22:00 │ 23:00 │  0:00 │
│ KEK   │ 23:00 │  0:00 │  1:00 │  2:00 │  3:00 │  4:00 │  5:00 │  6:00 │  7:00 │  8:00 │
└───────┴───────┴───────┴───────┴───────┴───────┴───────┴───────┴───────┴───────┴───────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;meetings&#34;&gt;Meetings&lt;/h3&gt;
&lt;p&gt;Most people around me use &amp;ldquo;doodle&amp;rdquo; which is kind of a pain. &lt;a href=&#34;https://www.when2meet.com/&#34;&gt;when2meet&lt;/a&gt; is far superior.&lt;/p&gt;
&lt;h2 id=&#34;open&#34;&gt;Open&lt;/h2&gt;
&lt;p&gt;The whole story surrounding opening files is insane, especially once one leaves the manicured gardens of big name DEs (Gnome and the like).  Thankfully others are as fed up as me and have come up with good solutions.  Central to mine is using &lt;a href=&#34;https://github.com/chmln/handlr&#34;&gt;https://github.com/chmln/handlr&lt;/a&gt;.  I call &lt;code&gt;handlr open&lt;/code&gt; through my own &lt;code&gt;open&lt;/code&gt; script which I used on the CLI or set to be called from kitty, liferea, etc.&lt;/p&gt;
&lt;p&gt;Via &lt;code&gt;handlr&lt;/code&gt; commands I manually set an explicit mapping from mime types to &lt;code&gt;.desktop&lt;/code&gt; files.  The former in &lt;code&gt;~/.config/mimeapps.list&lt;/code&gt; and the latter under &lt;code&gt;~/.local/share/applications/&lt;/code&gt;.  All of this goes into the &lt;code&gt;vcsh&lt;/code&gt; repo &lt;code&gt;dots&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;handlr open&lt;/code&gt; call can also handle URLs which I map to a &lt;code&gt;web-browser.desktop&lt;/code&gt; that simply calls my &lt;code&gt;web-browser&lt;/code&gt; script and that dispatches the URL to an application based on pattern matching.  Some of the more used dispatching:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;video looking URLs go to &lt;code&gt;mpv --profile=yt&lt;/code&gt; (see section on &lt;code&gt;mpv&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;twitter looking URLs get rewritten to nitter.net&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;todo&#34;&gt;Todo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; factor vcsh repos to move non-secret dotfiles to github and link to them from here&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; section on operating system, Debian GNU/Linux&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; section on ssh (many tips/tricks, jsonnet-based config)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; section on vpn (nord, linux, phone, router)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; section on router (tomato firmware)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; rss&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; videos&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
